def f(data : [TSV(Float)]) : [Float] {
  // For each input data, we read the float payload, add one to it, and store
  // it in the output sequence.
  var out = []
  // We declare that the 'out' variable is mutated inside the loop (push). The
  // loop iterates over the timestamped values of 'data' (messages with a
  // payload and an associated timestamp).
  loop out for tsv in data {
    var x = value(tsv) + 1.0
    out = push(out, x)
  }
  return out
}

// Definition of a periodic task template 'x'. We can instantiate multiple
// tasks from each task template, by connecting its inputs and outputs
// differently and/or by providing different arguments when instantiating it.
template x(period : Int) {
  // We declare that this template has one input port and one output port. Both
  // of these expect floating-point payloads.
  input in1 : Float
  output out1 : Float
  // We use a loop without condition to run the task template until explicitly
  // terminated by the user.
  loop {
    // By using an sdelay in each iteration, we get a periodic task. The
    // 'period' does not have to be a fixed value.
    sdelay period
    read in1 to indata
    loop for x in f(indata) {
      write x to out1
    }
  }
}

system {
  sensor src : Float
  actuator dst : Float

  task a = x(500ms)
  task b = x(250ms)

  src -> a.in1
  a.out1 -> b.in1
  b.out1 -> dst
}
